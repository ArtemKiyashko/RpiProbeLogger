name: RpiProbeLogger-$(SourceBranchName)$(Rev:.r)

trigger:
  tags:
    include:
      - release-*
  paths:
    include:
      - RpiProbeLogger
      - RpiProbeLogger.BusModels
      - ReportCsvHandlerTests
      - SenseServiceTests
      - TemperServiceTests
      - ReportServiceTests

stages:
- stage: BuildAndTest
  displayName: 'Build and test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and test'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
        - task: DotNetCoreCLI@2
          displayName: 'Test'
          inputs:
            command: 'test'
            projects: '**/*Tests.csproj'
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: 'RpiProbeLogger/RpiProbeLogger.csproj'
            arguments: '--self-contained -r linux-arm -f net6.0 -c Release'
        - publish: $(System.DefaultWorkingDirectory)/RpiProbeLogger/bin/Release/net6.0/linux-arm
          displayName: 'Publish artifacts'
          artifact: RpiProbeLogger
- stage: DeployRpiProbeLoggerHome
  displayName: 'Deploy Home'
  jobs:
    - deployment: RpiProbeLoggerHome
      environment: Home
      variables:
        - name: ProbeLoggerServiceExist
          value: false
      strategy:
        runOnce:
          deploy:
            steps:
              - script: if systemctl --all --type service | grep 'probelogger.service'; then echo "##vso[task.setvariable variable=ProbeLoggerServiceExist]true"; fi
                displayName: 'Check if service exist'
              - script: sudo systemctl stop probelogger
                displayName: 'Stop logger service'
                condition: eq(variables.ProbeLoggerServiceExist, 'true')
              - script: sudo systemctl disable probelogger
                displayName: 'Disable logger service'
                condition: eq(variables.ProbeLoggerServiceExist, 'true')
              - task: CopyFiles@2
                displayName: 'Copy files'
                inputs:
                  SourceFolder: '$(Pipeline.Workspace)/RpiProbeLogger'
                  Contents: '**'
                  TargetFolder: '/home/pi/RpiProbeLogger'
                  CleanTargetFolder: true
              - script: sudo systemctl enable /home/pi/RpiProbeLogger/probelogger.service
                displayName: 'Enable logger service'
              - script: sudo systemctl start probelogger
                displayName: 'Start logger service'
              
- stage: DeployRpiProbeLoggerVostok
  displayName: 'Deploy Vostok'
  dependsOn: DeployRpiProbeLoggerHome
  jobs:
    - deployment: RpiProbeLoggerVostok
      environment: Vostok
